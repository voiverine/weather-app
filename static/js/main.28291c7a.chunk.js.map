{"version":3,"sources":["app/constants.ts","app/axios.ts","app/showToast.ts","hooks/useAPIQuery.tsx","features/forecast/logic/formatDate.ts","features/forecast/logic/createImageUri.ts","features/forecast/logic/useForecast.ts","features/forecast/logic/parseWeatherData.ts","features/forecast/logic/parseForecastData.ts","components/subtitle/Subtitle.tsx","features/forecast/Results.tsx","features/forecast/Forecast.tsx","features/stations/logic/useAddStation.ts","components/button/Button.tsx","features/stations/addStation.tsx","features/stations/logic/useStationList.ts","features/stations/logic/useRemoveStation.ts","features/stations/StationList.tsx","features/stations/Stations.tsx","features/stations/logic/useStations.ts","components/tabPanel/TabPanel.tsx","App.tsx","reportWebVitals.ts","app/materialTheme.ts","app/reactQuery.ts","app/globalStyles.tsx","index.tsx"],"names":["units","apiPaths","axiosApi","baseURL","axiosInstance","this","axios","create","path","params","method","url","then","response","data","catch","err","console","log","headers","showToast","message","messageType","toast","type","defaultOptions","useAPIQuery","options","mergedOptions","result","useQuery","delete","get","error","useEffect","toastMessage","formatDate","timestamp","t","today","dayjs","date","format","isToday","isSame","createImageUri","iconCode","useForecast","useState","searchPhrase","setSearchPhrase","forecastType","setForecastType","q","enabled","fetchWeather","refetch","errorWeather","dataWeather","isLoadingWeather","isLoading","fetchForecast","errorForecast","dataForecast","isLoadingForecast","handleApiCall","handleSubmit","e","preventDefault","handleForecastTypeChange","ev","value","parsedData","useMemo","id","dt","location","name","icon","weather","description","clouds","main","temp_min","Math","round","temp_max","list","map","el","city","parseForecastData","sx","marginTop","Subtitle","props","children","Typography","component","Results","length","resultType","TableContainer","overflowX","width","Table","aria-label","TableHead","TableRow","TableCell","TableBody","row","scope","Chip","label","Avatar","alt","title","src","Forecast","Grid","container","spacing","alignItems","item","xs","sm","onSubmit","TextField","fullWidth","onChange","event","target","variant","ToggleButtonGroup","color","exclusive","ToggleButton","validationSchema","yup","required","latitude","min","max","longitude","altitude","Button","rest","size","AddStation","formik","queryClient","useQueryClient","mutateAsync","useMutation","newStation","post","onError","onSuccess","setQueryData","input","ID","values","helpers","a","parsedValues","external_id","resetForm","useFormik","initialValues","useAddStation","handleChange","touched","Boolean","errors","helperText","Box","display","justifyContent","paddingTop","paddingBottom","useStationList","isError","disabled","useRef","Set","toggleDisabled","current","has","add","removeStation","Array","isArray","filter","mutate","useRemoveStation","StationList","onClick","Stations","isFormShown","setIsFormShown","useStations","TabPanel","index","other","role","hidden","p","App","selectedTab","setSelectedTab","Container","maxWidth","Tabs","val","Tab","position","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","typography","fontFamily","join","body1","lineHeight","body2","textAlign","h2","fontSize","fontWeight","h3","marginBottom","QueryClient","queries","retry","GlobalStyles","styles","html","WebkitFontSmoothing","MozOsxFontSmoothing","height","boxSizing","body","margin","padding","ReactDOM","render","StrictMode","client","ThemeProvider","initialIsOpen","document","getElementById"],"mappings":"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","file":"static/js/main.28291c7a.chunk.js","sourcesContent":["export const apiUrl = \"https://weather-proxy-api.herokuapp.com/\";\nexport const apiImageUrl = \"http://openweathermap.org/img/wn/\";\nexport const apiImageSuffix = \"@2x.png\";\n\nexport const units = \"metric\";\n\nexport const apiPaths = {\n  weather: \"/2.5/weather\",\n  forecast: \"/2.5/forecast\",\n  stations: \"/3.0/stations\",\n};\n","import axios from \"axios\";\nimport { apiUrl } from \"./constants\";\n\nclass AxiosApi {\n  readonly axiosInstance;\n\n  constructor(private baseURL: string) {\n    this.axiosInstance = axios.create({\n      baseURL,\n    });\n    // space to add interceptors\n  }\n\n  get(path: string, params?: Record<string, string | number>) {\n    return this.axiosInstance({\n      method: \"GET\",\n      url: path,\n      params,\n    })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        // TODO serve the errors\n        console.log(err);\n        throw err;\n      });\n  }\n\n  post(path: string, data?: Record<string, string | number>) {\n    return this.axiosInstance({\n      method: \"POST\",\n      url: path,\n      data,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        // TODO serve the errors\n        console.log(err);\n        throw err;\n      });\n  }\n  delete(path: string) {\n    return this.axiosInstance({\n      method: \"DELETE\",\n      url: path,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        // TODO serve the errors\n        console.log(err);\n        throw err;\n      });\n  }\n}\n\nconst axiosApi = new AxiosApi(apiUrl);\nexport { axiosApi };\n","import { toast } from \"react-toastify\";\n\ntype ShowToast = (\n  message: string | Error | null,\n  messageType?: \"error\" | \"info\" | \"success\" | \"warning\"\n) => void;\n\nexport const showToast: ShowToast = (message, messageType = \"error\") => {\n  if (typeof message === \"string\") {\n    toast(message, { type: messageType });\n  }\n  if (typeof message === \"object\" && \"message\" in (message as Error)) {\n    toast(message?.message, { type: messageType });\n  }\n  if (!message) {\n    toast(\"Unidentified error\");\n  }\n};\n","import { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { UseQueryOptions, UseQueryResult } from \"react-query/types/react/types\";\nimport { axiosApi } from \"../app/axios\";\nimport { showToast } from \"../app/showToast\";\n\ntype Url = [path: string, params?: Record<string, string | number>];\ninterface Options extends UseQueryOptions {\n  showToast?: boolean;\n  toastMessage?: string;\n  method?: \"GET\" | \"DELETE\";\n}\nconst defaultOptions = { showToast: true, method: \"GET\" };\n\ntype UseAPIQuery = <TData = unknown>(\n  url: Url,\n  options?: Options\n) => UseQueryResult<TData>;\n\nconst useAPIQuery: UseAPIQuery = <TData extends unknown>(\n  url: Url,\n  options: Options = {}\n) => {\n  const mergedOptions: Record<string, any> = { ...defaultOptions, ...options };\n\n  const result = useQuery<TData, Error>(\n    url,\n    () => {\n      if (options.method === \"DELETE\") {\n        return axiosApi.delete(url[0]);\n      }\n      return axiosApi.get(url[0], url[1]);\n    },\n    mergedOptions\n  );\n\n  // optionally, display a toast with error\n  const { error } = result;\n  useEffect(() => {\n    if (mergedOptions.showToast && error) {\n      showToast(error);\n    }\n  }, [error, mergedOptions.toastMessage, mergedOptions.showToast]);\n\n  return result;\n};\n\nexport { useAPIQuery };\n","import dayjs from \"dayjs\";\n\ntype FormatDate = (timestamp: number) => {\n  date: string;\n  isToday: boolean;\n};\n\nexport const formatDate: FormatDate = (timestamp) => {\n  const t = timestamp * 1000;\n  const today = dayjs();\n\n  return {\n    date: dayjs(t).format(\"ddd MMM DD YYYY, H:mm\"),\n    isToday: dayjs(t).isSame(today, \"day\"),\n  };\n};\n","import { apiImageSuffix, apiImageUrl } from \"../../../app/constants\";\n\ntype CreateImageUri = (iconCode: string) => string;\n\nexport const createImageUri: CreateImageUri = (iconCode) =>\n  apiImageUrl + iconCode + apiImageSuffix;\n","import { FormEvent, MouseEvent, useMemo, useState } from \"react\";\nimport { apiPaths, units } from \"../../../app/constants\";\nimport { useAPIQuery } from \"../../../hooks/useAPIQuery\";\nimport { parseWeatherData } from \"./parseWeatherData\";\nimport { parseForecastData } from \"./parseForecastData\";\nimport { ForecastResponseData, WeatherResponseData } from \"./types\";\n\nexport const useForecast = () => {\n  const [searchPhrase, setSearchPhrase] = useState<string>(\"\");\n  const [forecastType, setForecastType] = useState<\n    typeof apiPaths.weather | typeof apiPaths.forecast\n  >(apiPaths.weather);\n\n  // 1 day\n  const {\n    refetch: fetchWeather,\n    error: errorWeather,\n    data: dataWeather,\n    isLoading: isLoadingWeather,\n  } = useAPIQuery<WeatherResponseData>(\n    [apiPaths.weather, { q: searchPhrase, units }],\n    { enabled: false }\n  );\n\n  // 5 days\n  const {\n    refetch: fetchForecast,\n    error: errorForecast,\n    data: dataForecast,\n    isLoading: isLoadingForecast,\n  } = useAPIQuery<ForecastResponseData>(\n    [apiPaths.forecast, { q: searchPhrase, units }],\n    { enabled: false }\n  );\n\n  const handleApiCall = (type = forecastType) => {\n    if (type === apiPaths.weather) {\n      void fetchWeather();\n    }\n    if (type === apiPaths.forecast) {\n      void fetchForecast();\n    }\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (searchPhrase) {\n      void handleApiCall();\n    }\n  };\n  const handleForecastTypeChange = (\n    ev: MouseEvent<HTMLElement>,\n    value: string\n  ) => {\n    if (value) {\n      setForecastType(value);\n    }\n    if (value && searchPhrase) {\n      // fetch results for the type of state that component is changing to\n      handleApiCall(value);\n    }\n    if (!value && searchPhrase) {\n      // fetch results for the current type of state if state doesn't change\n      handleApiCall();\n    }\n  };\n\n  const parsedData = useMemo(() => {\n    if (dataWeather && forecastType === apiPaths.weather) {\n      return parseWeatherData(dataWeather);\n    }\n\n    if (dataForecast && forecastType === apiPaths.forecast) {\n      return parseForecastData(dataForecast);\n    }\n  }, [dataWeather, dataForecast, forecastType]);\n\n  return {\n    handleSubmit,\n    handleForecastTypeChange,\n    error: errorWeather || errorForecast,\n    isLoading: isLoadingWeather || isLoadingForecast,\n    parsedData,\n    setSearchPhrase,\n    searchPhrase,\n    forecastType,\n  };\n};\n","import { ParsedResponse, WeatherResponseData } from \"./types\";\nimport { formatDate } from \"./formatDate\";\nimport { createImageUri } from \"./createImageUri\";\nimport { apiPaths } from \"../../../app/constants\";\n\ntype ParseWeatherData = (data: WeatherResponseData) => ParsedResponse;\n\nexport const parseWeatherData: ParseWeatherData = (data) => {\n  return [\n    {\n      type: apiPaths.weather,\n      id: data.dt,\n      location: data.name,\n      ...formatDate(data.dt),\n      icon: createImageUri(data.weather[0].icon),\n      description: data.weather[0].description,\n      clouds: data.weather[0].main,\n      temp_min: Math.round(data.main.temp_min),\n      temp_max: Math.round(data.main.temp_max),\n    },\n  ];\n};\n","import { ParsedResponse, ForecastResponseData } from \"./types\";\nimport { formatDate } from \"./formatDate\";\nimport { createImageUri } from \"./createImageUri\";\nimport { apiPaths } from \"../../../app/constants\";\n\ntype ParseWeatherData = (data: ForecastResponseData) => ParsedResponse;\n\nexport const parseForecastData: ParseWeatherData = (data) => {\n  return data.list.map((el) => ({\n    type: apiPaths.forecast,\n    id: el.dt,\n    location: data.city.name,\n    ...formatDate(el.dt),\n    icon: createImageUri(el.weather[0].icon),\n    description: el.weather[0].description,\n    clouds: el.weather[0].main,\n    temp_min: Math.round(el.main.temp_min),\n    temp_max: Math.round(el.main.temp_max),\n  }));\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Typography } from \"@mui/material\";\n\nconst sx = {\n  marginTop: 6,\n};\n\nconst Subtitle: FunctionComponent = (props) => {\n  const { children } = props;\n\n  return (\n    <Typography component=\"h3\" sx={sx}>\n      {children}\n    </Typography>\n  );\n};\n\nexport default Subtitle;\n","import React, { ReactElement } from \"react\";\nimport { ParsedResponse } from \"./logic/types\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Avatar,\n  Chip,\n} from \"@mui/material\";\nimport Subtitle from \"../../components/subtitle\";\nimport { apiPaths } from \"../../app/constants\";\n\ninterface Props {\n  data: ParsedResponse;\n}\n\nconst Results = (props: Props): ReactElement => {\n  const { data } = props;\n\n  if (data.length === 0) {\n    return <Subtitle>No forecast for that query.</Subtitle>;\n  }\n\n  const resultType =\n    data[0].type === apiPaths.weather ? \"Current weather\" : \"5 day forecast\";\n\n  return (\n    <>\n      <Subtitle>\n        {resultType} for {data[0].location}\n      </Subtitle>\n      <TableContainer sx={{ overflowX: \"auto\", width: \"100%\" }}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell />\n              <TableCell />\n              <TableCell>High</TableCell>\n              <TableCell>Low</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.map((row) => (\n              <TableRow key={row.id}>\n                <TableCell component=\"td\" scope=\"row\">\n                  {row.date} {row.isToday ? <Chip label=\"Today\" /> : null}\n                </TableCell>\n                <TableCell>\n                  <Avatar\n                    sx={{ width: \"50px\" }}\n                    alt={row.description}\n                    title={row.description}\n                    src={row.icon}\n                  />\n                </TableCell>\n                <TableCell>{row.clouds}</TableCell>\n                <TableCell>{row.temp_min} C</TableCell>\n                <TableCell>{row.temp_max} C</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default Results;\n","import React, { ReactElement } from \"react\";\nimport { Grid, TextField } from \"@mui/material\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { apiPaths } from \"../../app/constants\";\nimport { useForecast } from \"./logic/useForecast\";\nimport Results from \"./Results\";\nimport Subtitle from \"../../components/subtitle\";\n\nconst Forecast = (): ReactElement => {\n  const {\n    handleSubmit,\n    handleForecastTypeChange,\n    error,\n    isLoading,\n    parsedData,\n    setSearchPhrase,\n    searchPhrase,\n    forecastType,\n  } = useForecast();\n\n  return (\n    <Grid container spacing={1} sx={{ alignItems: \"center\" }}>\n      <Grid item xs={12} sm={4}>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            fullWidth\n            value={searchPhrase}\n            onChange={(event) => setSearchPhrase(event.target.value)}\n            label=\"search for city\"\n            variant=\"outlined\"\n          />\n        </form>\n      </Grid>\n      <Grid item xs={12} sm={8}>\n        <ToggleButtonGroup\n          color=\"primary\"\n          value={forecastType}\n          exclusive\n          onChange={handleForecastTypeChange}\n        >\n          <ToggleButton value={apiPaths.weather}>Current weather</ToggleButton>\n          <ToggleButton value={apiPaths.forecast}>5 day forecast</ToggleButton>\n        </ToggleButtonGroup>\n      </Grid>\n      {error && !parsedData ? (\n        <Subtitle>We couldn't fetch the results for {searchPhrase}.</Subtitle>\n      ) : null}\n      {!parsedData && isLoading ? <Subtitle>Loading...</Subtitle> : null}\n      {parsedData ? <Results data={parsedData} /> : null}\n    </Grid>\n  );\n};\n\nexport default Forecast;\n","import { useMutation, useQueryClient } from \"react-query\";\nimport { FormikHelpers, useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { axiosApi } from \"../../../app/axios\";\nimport { apiPaths } from \"../../../app/constants\";\nimport { showToast } from \"../../../app/showToast\";\nimport { Station } from \"./types\";\n\ntype FormValues = {\n  name: string;\n  latitude: string | number;\n  longitude: string | number;\n  altitude: string | number;\n};\n\nconst validationSchema = yup.object({\n  name: yup.string().required(\"Name is required\"),\n  latitude: yup\n    .number()\n    .min(-90, \"Must be higher than -90.\")\n    .max(90, \"Must be lower than 90.\")\n    .required(),\n  longitude: yup\n    .number()\n    .min(-180, \"Must be higher than -180.\")\n    .max(180, \"Must be lower than 180.\")\n    .required(),\n  altitude: yup\n    .number()\n    .min(-100, \"Must be higher than -100.\")\n    .max(9000, \"Must be lower than 9000\")\n    .required(),\n});\n\nconst useAddStation = () => {\n  const queryClient = useQueryClient();\n\n  const { mutateAsync } = useMutation(\n    (newStation: Record<string, string | number>) => {\n      return axiosApi.post(apiPaths.stations, newStation);\n    },\n    {\n      onError: (error) => {\n        showToast((error as any) || \"Couldn't add your station.\");\n      },\n      onSuccess: (data: Station) => {\n        showToast(\"Your station has been added.\", \"success\");\n        queryClient.setQueryData(\n          [apiPaths.stations],\n          (input: Station[] | undefined): Station[] => {\n            const parsedData = { ...data, id: data.ID || data.id };\n\n            return [...(input ? input : []), parsedData];\n          }\n        );\n      },\n    }\n  );\n\n  const handleSubmit = async (\n    values: FormValues,\n    helpers: FormikHelpers<FormValues>\n  ) => {\n    const parsedValues = {\n      ...values,\n      external_id: `${values.latitude}_${values.longitude}_${values.altitude}`,\n    };\n    const { ID } = await mutateAsync(parsedValues);\n    if (ID) {\n      helpers.resetForm();\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      altitude: \"\",\n    } as FormValues,\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit,\n  });\n\n  return { formik };\n};\n\nexport { useAddStation };\n","import React, { FunctionComponent } from \"react\";\nimport { Button as ButtonComponent, ButtonProps } from \"@mui/material\";\n\ninterface Props extends ButtonProps {\n  //space for customization options\n}\n\nconst Button: FunctionComponent<Props> = (props) => {\n  const { children, ...rest } = props;\n\n  return (\n    <ButtonComponent size=\"large\" {...rest}>\n      {children}\n    </ButtonComponent>\n  );\n};\n\nexport default Button;\n","import React, { FunctionComponent } from \"react\";\nimport { Box, Grid, TextField } from \"@mui/material\";\nimport { useAddStation } from \"./logic/useAddStation\";\nimport Button from \"../../components/button\";\n\nconst AddStation: FunctionComponent = () => {\n  const { formik } = useAddStation();\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={1} sx={{ alignItems: \"center\" }}>\n          <Grid item xs={12} sm={3}>\n            <TextField\n              fullWidth\n              id=\"name\"\n              name=\"name\"\n              label=\"Name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n          </Grid>\n          <Grid item xs={12} sm={3}>\n            <TextField\n              fullWidth\n              id=\"latitude\"\n              name=\"latitude\"\n              label=\"Latitude\"\n              type=\"number\"\n              value={formik.values.latitude}\n              onChange={formik.handleChange}\n              error={formik.touched.latitude && Boolean(formik.errors.latitude)}\n              helperText={formik.touched.latitude && formik.errors.latitude}\n            />\n          </Grid>\n          <Grid item xs={12} sm={3}>\n            <TextField\n              fullWidth\n              id=\"longitude\"\n              name=\"longitude\"\n              label=\"Longitude\"\n              type=\"number\"\n              value={formik.values.longitude}\n              onChange={formik.handleChange}\n              error={\n                formik.touched.longitude && Boolean(formik.errors.longitude)\n              }\n              helperText={formik.touched.longitude && formik.errors.longitude}\n            />\n          </Grid>{\" \"}\n          <Grid item xs={12} sm={3}>\n            <TextField\n              fullWidth\n              id=\"altitude\"\n              name=\"altitude\"\n              label=\"Altitude\"\n              type=\"number\"\n              value={formik.values.altitude}\n              onChange={formik.handleChange}\n              error={formik.touched.altitude && Boolean(formik.errors.altitude)}\n              helperText={formik.touched.altitude && formik.errors.altitude}\n            />\n          </Grid>\n        </Grid>\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            paddingTop: 2,\n            paddingBottom: 2,\n          }}\n        >\n          <Button type=\"submit\" variant=\"outlined\">\n            Add\n          </Button>\n        </Box>\n      </form>\n    </div>\n  );\n};\n\nexport default AddStation;\n","import { useRemoveStation } from \"./useRemoveStation\";\nimport { useAPIQuery } from \"../../../hooks/useAPIQuery\";\nimport { apiPaths } from \"../../../app/constants\";\nimport { Station } from \"./types\";\n\nexport const useStationList = () => {\n  const { isError, isLoading, data } = useAPIQuery<Station[]>([\n    apiPaths.stations,\n  ]);\n\n  const { removeStation, disabled } = useRemoveStation();\n  return { isError, isLoading, data, removeStation, disabled };\n};\n","import { useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { apiPaths } from \"../../../app/constants\";\nimport { axiosApi } from \"../../../app/axios\";\nimport { showToast } from \"../../../app/showToast\";\nimport { Station } from \"./types\";\n\nexport const useRemoveStation = () => {\n  const queryClient = useQueryClient();\n\n  const disabled = useRef<Set<string>>(new Set());\n  const toggleDisabled = (id: string) => {\n    if (disabled.current.has(id)) {\n      disabled.current.delete(id);\n    } else {\n      disabled.current.add(id);\n    }\n  };\n\n  const { mutate } = useMutation(\n    (id: string) => {\n      toggleDisabled(id);\n      return axiosApi.delete(`${apiPaths.stations}/${id}`);\n    },\n    {\n      onError: (error, id) => {\n        toggleDisabled(id);\n        showToast((error as any) || \"Couldn't delete your station.\");\n      },\n      onSuccess: (data, id) => {\n        showToast(\"Your station has been deleted.\", \"success\");\n        toggleDisabled(id);\n        queryClient.setQueryData(\n          [apiPaths.stations],\n          (input: Station[] | undefined): Station[] => {\n            return Array.isArray(input)\n              ? input.filter((el) => el.id !== id)\n              : [];\n          }\n        );\n      },\n    }\n  );\n\n  return { removeStation: mutate, disabled };\n};\n","import React from \"react\";\nimport { useStationList } from \"./logic/useStationList\";\nimport Subtitle from \"../../components/subtitle\";\nimport {\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@mui/material\";\n\nconst StationList = () => {\n  const { isError, data, isLoading, removeStation, disabled } =\n    useStationList();\n  const isDisabled = (id: string) => disabled.current.has(id);\n\n  return (\n    <div>\n      {isError ? <Subtitle>Couldn't fetch the station list.</Subtitle> : null}\n      {isLoading && !data ? <Subtitle>Loading...</Subtitle> : null}\n      {data && !data.length ? <Subtitle>Add a station.</Subtitle> : null}\n      {data && data.length ? (\n        <>\n          <TableContainer sx={{ overflowX: \"auto\", width: \"100%\" }}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Latitude</TableCell>\n                  <TableCell>Longitude</TableCell>\n                  <TableCell>Altitude</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((row) => (\n                  <TableRow key={row.id}>\n                    <TableCell component=\"td\" scope=\"row\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell>{row.latitude}</TableCell>\n                    <TableCell>{row.longitude}</TableCell>\n                    <TableCell>{row.altitude}</TableCell>\n                    <TableCell>\n                      <Button\n                        onClick={() => {\n                          removeStation(row.id);\n                        }}\n                        disabled={isDisabled(row.id)}\n                      >\n                        X\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default StationList;\n","import React, { ReactElement } from \"react\";\nimport { Box } from \"@mui/material\";\nimport { useStations } from \"./logic/useStations\";\nimport AddStation from \"./addStation\";\nimport StationList from \"./StationList\";\nimport Button from \"../../components/button\";\n\nconst Stations = (): ReactElement => {\n  const { isFormShown, setIsFormShown } = useStations();\n  return (\n    <Box>\n      {isFormShown ? <AddStation /> : null}\n      <Button variant=\"outlined\" onClick={() => setIsFormShown(!isFormShown)}>\n        {isFormShown ? \"hide the form\" : \"+Add a station\"}\n      </Button>\n      <StationList />\n    </Box>\n  );\n};\n\nexport default Stations;\n","import { useState } from \"react\";\n\nconst useStations = () => {\n  const [isFormShown, setIsFormShown] = useState(false);\n\n  return { isFormShown, setIsFormShown };\n};\n\nexport { useStations };\n","import React, { FunctionComponent, ReactElement } from \"react\";\nimport { Box } from \"@mui/material\";\n\ninterface Props {\n  value: string;\n  index: string;\n}\n\nconst TabPanel: FunctionComponent<Props> = (props): ReactElement => {\n  const { children, value, index, ...other } = props;\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={index} {...other}>\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n};\nexport default TabPanel;\n","import React, { useState } from \"react\";\nimport { Container, Tabs, Tab } from \"@mui/material\";\nimport { ToastContainer } from \"react-toastify\";\nimport Forecast from \"./features/forecast\";\nimport Stations from \"./features/stations\";\nimport TabPanel from \"./components/tabPanel\";\n\nimport \"react-toastify/dist/ReactToastify.min.css\";\nconst App = () => {\n  const [selectedTab, setSelectedTab] = useState<\"forecast\" | \"stations\">(\n    \"stations\"\n  );\n\n  return (\n    <Container maxWidth=\"lg\">\n      <header>\n        <Tabs value={selectedTab} onChange={(e, val) => setSelectedTab(val)}>\n          <Tab label=\"Weather\" id=\"forecast\" value=\"forecast\" />\n          <Tab label=\"My Weather Stations\" id=\"stations\" value=\"stations\" />\n        </Tabs>\n        <TabPanel value={selectedTab} index=\"forecast\">\n          <Forecast />\n        </TabPanel>\n        <TabPanel value={selectedTab} index=\"stations\">\n          <Stations />\n        </TabPanel>\n      </header>\n      <ToastContainer position=\"bottom-right\" />\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { unstable_createMuiStrictModeTheme as createTheme } from \"@mui/material\";\n\nexport const theme = createTheme({\n  typography: {\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n    ].join(\",\"),\n    body1: {\n      lineHeight: 1.2,\n    },\n    body2: {\n      textAlign: \"left\",\n    },\n    h2: {\n      fontSize: \"1.2rem\",\n      fontWeight: 500,\n      textAlign: \"left\",\n    },\n    h3: {\n      fontSize: \"1.1rem\",\n      textAlign: \"left\",\n      marginBottom: \"0.2rem\",\n    },\n  },\n});\n","import { QueryClient } from \"react-query\";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n    },\n  },\n});\n","import { GlobalStyles as GlobalStylesComponent } from \"@mui/material\";\n\nconst GlobalStyles = () => {\n  return (\n    <GlobalStylesComponent\n      styles={{\n        html: {\n          WebkitFontSmoothing: \"antialiased\",\n          MozOsxFontSmoothing: \"grayscale\",\n          height: \"100%\",\n          width: \"100%\",\n        },\n        \"*, *::before, *::after\": {\n          boxSizing: \"inherit\",\n        },\n        body: {\n          height: \"100%\",\n          width: \"100%\",\n          margin: 0,\n          padding: 0,\n        },\n        \"#root\": {\n          height: \"100%\",\n          width: \"100%\",\n        },\n      }}\n    />\n  );\n};\n\nexport default GlobalStyles;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"@mui/material\";\nimport { QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { theme } from \"./app/materialTheme\";\nimport { queryClient } from \"./app/reactQuery\";\nimport GlobalStyles from \"./app/globalStyles\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyles />\n        <App />\n      </ThemeProvider>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}